# -----------------------------------------------------
# ALIASES
# -----------------------------------------------------

# -----------------------------------------------------
# General
# -----------------------------------------------------
alias c='clear'
alias nf='fastfetch'
alias pf='fastfetch'
alias ff='fastfetch'
alias ls='eza -a --icons'
alias ll='eza -al --icons'
alias lt='eza -a --tree --level=1 --icons'
alias shutdown='systemctl poweroff'
alias v='$EDITOR'
alias vim='$EDITOR'
alias ts='~/.config/ml4w/scripts/arch/snapshot.sh'
alias wifi='nmtui'
alias cleanup='~/.config/ml4w/scripts/arch/cleanup.sh'
alias winclass="xprop | grep 'CLASS'"
alias dot="cd ~/dotfiles"
alias remove-debug='~/.config/ml4w/scripts/arch/remove-debug'

# -----------------------------------------------------
# ML4W Apps
# -----------------------------------------------------
alias ml4w='flatpak run com.ml4w.welcome'
alias ml4w-settings='flatpak run com.ml4w.settings'
alias ml4w-calendar='flatpak run com.ml4w.calendar'
alias ml4w-sidebar='flatpak run com.ml4w.sidebar'
alias ml4w-hyprland='flatpak run com.ml4w.hyprlandsettings'
alias ml4w-options='ml4w-hyprland-setup -m options'
alias ml4w-diagnosis='~/.config/hypr/scripts/diagnosis.sh'
alias ml4w-hyprland-diagnosis='~/.config/hypr/scripts/diagnosis.sh'
alias ml4w-qtile-diagnosis='~/.config/ml4w/qtile/scripts/diagnosis.sh'
alias ml4w-update='~/.config/ml4w/scripts/installupdates.sh'

# -----------------------------------------------------
# Window Managers
# -----------------------------------------------------

alias Qtile='startx'
# Hyprland with Hyprland

# -----------------------------------------------------
# Git
# -----------------------------------------------------
alias gs="git status"
alias ga="git add"
alias gc="git commit -m"
alias gp="git push"
alias gpl="git pull"
alias gst="git stash"
alias gsp="git stash; git pull"
alias gfo="git fetch origin"
alias gcheck="git checkout"
alias gcredential="git config credential.helper store"

# -----------------------------------------------------
# Scripts
# -----------------------------------------------------
alias ascii='~/.config/ml4w/scripts/figlet.sh'
alias search-font='~/.config/ml4w/scripts/fontsearch.sh'

# -----------------------------------------------------
# EDIT CONFIG FILES
# -----------------------------------------------------

#alias confq='$EDITOR ~/dotfiles/qtile/config.py'
alias confp='$EDITOR ~/dotfiles/.config/picom/picom.conf'
alias confa='$EDITOR ~/.bash_aliases'
alias confz='$EDITOR ~/.zshrc'
alias rz='source ~/.zshrc'

# -----------------------------------------------------
# System
# -----------------------------------------------------
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

# -----------------------------------------------------
# Qtile
# -----------------------------------------------------
#alias res1='xrandr --output DisplayPort-0 --mode 2560x1440 --rate 120'
#alias res2='xrandr --output DisplayPort-0 --mode 1920x1080 --rate 120'
alias setkb='setxkbmap -model pc105 -layout de -variant nodeadkeys;echo "Keyboard set back to pc105 de nodeadkeys."'

function update-nvm() {
	local actual_pwd="$(pwd)"

	cd "$NVM_DIR" > /dev/null
	git fetch --tags origin > /dev/null

	local nvm_version="$(git describe --abbrev=0 --tags --match 'v[0-9]*' $(git rev-list --tags --max-count=1) | cut -d' ' -f-1)"

	git checkout $nvm_version > /dev/null

	. "$NVM_DIR/nvm.sh"
	cd "$actual_pwd" > /dev/null

	echo "Update nvm to $nvm_version"
}

function update-npm() {
	local installed_version="$(node -v | sed 's/^v//' | sed -e 's/\x1b\[[0-9;]*[mK]//g' -e 's/\x1b\[?[0-9;]*[mK]//g' | tr -d '[:space:]')"
	local new_version="$(nvm list-remote --lts | tail -n 1 | awk '{print $2}' | sed 's/^v//' | sed -e 's/\x1b\[[0-9;]*[mK]//g' -e 's/\x1b\[?[0-9;]*[mK]//g' | tr -d '[:space:]')"

	echo "Installed node version: $installed_version"
	echo "New LTS node version: $new_version"
	echo
		    
	# Debug: Zeige die ASCII-Werte der Strings an
	#echo "ASCII values of installed_version: $(echo -n "$installed_version" | od -An -t dC)"
	#echo "ASCII values of new_version: $(echo -n "$new_version" | od -An -t dC)"
	#echo

	#[ ]&& \. "$NVM_DIR/nvm.sh"

	if [[ "$new_version" == "$installed_version" ]]; then
		echo "$new_version is installed, no update needed."
	else
		echo "Update available: $installed_version -> $new_version"
		echo
		# Uncomment the following lines when you're ready to perform the update
		nvm install $new_version --reinstall-packages-from=$installed_version
		npm install -global @babel/core @babel/cli @babel/preset-env
		npm install -global uglify-js csso-cli
		nvm uninstall $installed_version
		. "$NVM_DIR/nvm.sh"
	fi
}

function update-firmware() {
	echo ""
	echo ""
	echo "##########################"
	echo "# Aktualisiere Metadaten #"
	echo "##########################"
	echo ""
	sudo fwupdmgr refresh --force
	echo ""
	echo ""
	echo ""
	echo "###############################"
	echo "# Suche nach Aktualisierungen #"
	echo "###############################"
	echo ""
	sudo fwupdmgr get-updates
	echo ""
	echo ""
	echo ""
	echo "##########################"
	read "INSTALL_FWUPDMGR?>>>> Sollen die Akualisierungen installiert werden? (y/N) "
	echo ""
	if [[ "$INSTALL_FWUPDMGR" =~ ^[yY]$ ]]; then
		echo ""
		echo ">>>> Installiere Aktualisierungen..."
		sudo fwupdmgr update
	else
		echo ""
		echo ">>>> ABBRUCH: Aktualisierung nicht durchgefÃ¼hrt!"
		echo ""
	fi
	echo ""
	echo ""
}

function update-system() {
	local PARAMS="-Su"
	local FILES=""

	if [[ ! -z "$1" ]]
	then
		PARAMS="$1"
		shift
		FILES="$*"
	fi
	
	echo ""
	echo ""
	echo "############################"
	echo "# System: Update gestartet #"
	echo "############################"
	echo ""
	sudo pacman ${PARAMS}y ${FILES}
	echo ""
	echo ""
	echo "#########################"
	echo "# AUR: Update gestartet #"
	echo "#########################"
	echo ""
	trizen ${PARAMS}a --noedit --noconfirm ${FILES}
}

####compdef update-system=trizen

####+BEGIN_SRC sh 
###> compdef update-system=trizen
####+END_SRC

###
# Start - docker-lamp commands
###

# Wrapper.
alias docker-lamp='/srv/git/docker-lamp/docker-lamp'

# dl-start - Starts docker-lamp.
# Use it inside the project directory where the .env is.
alias dl-start='docker-lamp start'

# dl-stop - Stops docker-lamp.
# Removes all container and volumes except the database volume.
# Switching the database between MariaDB and MySQL should not be done here.
# Use it inside the project directory where the .env is.
alias dl-stop='docker-lamp stop'

# dl-down - Stops docker-lamp.
# Saves all databases to initDB and removes the database volume.
# Use it inside the project directory where the .env is.
# Is required if the database is to be switched between MariaDB and MySQL.
alias dl-down='docker-lamp shutdown'

# dl-cli - Command to call up the terminal of the respective container.
# Use it inside the project directory where the .env is.
alias dl-cli='docker-lamp cli'

# dl-restart - Stops and starts docker-lamp in one go.
# Use it inside the project directory where the .env is.
alias dl-restart='docker-lamp restart'

# dl-update - Updates the images of docker-lamp.
# Use it inside the project directory where the .env is.
alias dl-update='docker-lamp update-images'

# dl-clear - Deletes the obsolete docker-lamp images after the update.
# Use it inside the project directory where the .env is.
alias dl-clear='docker-lamp delete-obsolete-images'

# dl-init - Switches to the project directory before starting docker-lamp.
# If the project directory is different from '/srv/', this must be adjusted here.
alias dl-init='echo "- Change directory to /srv/"; cd /srv/; dl-start'

###
# End - docker-lamp commands
###
